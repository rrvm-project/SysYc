WHITESPACE = _{ " " | "\t" | ("\\" ~ NEWLINE) }
NEWLINE = _{ "\r\n" | "\n" | "\r" }
COMMENT = _{ ";" ~ (!NEWLINE ~ ANY)* }
Integer = ${ ASCII_DIGIT+ }
Float = ${ ASCII_DIGIT+ ~ (".")? ~ ASCII_DIGIT* }

// need more types of int or float ?
i32_t = { "i32 " }
int_t = _{ i32_t }
f32_t = { "f32 " }
flaot_t = _{ f32_t }
i32_ptr = { "i32* " }
f32_ptr = { "f32* " }
void_t = { "void " }

Label = ${ (ASCII_ALPHA | "_") ~ (ASCII_DIGIT | ASCII_ALPHA | "_")* }
RefLabel = @{ ("%" | "@") ~ Label }
RefGLobalLabel = @{ "%" ~ Label }
Ident = ${ "%" ~ (ASCII_ALPHA | ASCII_DIGIT | "." | "_" )+ }
Number = _{ Float | Integer }
Value = _{ Number | Ident }
FuncType= _{ i32_t | f32_t | void_t }
VarType = _{ i32_t | f32_t }
PtrType = _{ i32_ptr | f32_ptr }

// integer binary operation
Add = { "add " }
Sub = { "sub " }
Div = { "div " }
Mul = { "smul " }
Rem = { "srem " }
// unsigned operation is ont supported now
// Umul = { "umul " }
// Urem = { "urem " }

// flaot point binary operation
Fadd = { "fadd " }
Fsub = { "fsub " }
Fdiv = { "fdiv " }
Fmul = { "fmul " }
Frem = { "frem " }

// bit operation
Shl = { "shl " }
Lshr = { "lshr " }
Ashr = { "ashr " }
And = { "and " }
Or = { "or " }
Xor = { "xor " }

// arithmetic instruction
ArithOp = {
  Add | Sub | Div | Mul | Rem
  | Fadd | Fsub | Fdiv | Fmul | Frem
  | Shl | Lshr | Ashr | And | Or | Xor
}

// integer comparison predicate, consider signed only
EQ = { "eq " }
NE = { "ne " }
SGT = { "sgt " }
SGE = { "sge " }
SLT = { "slt " }
SLE = { "sle " }
IcmpCond = _{ EQ | NE | SGT | SGE | SLT | SLE }

// float comparison predicate, consider orderded only
OEQ = { "oeq " }
ONE = { "one " }
OGT = { "ogt " }
OGE = { "oge " }
OLT = { "olt " }
OLE = { "ole " }
FcmpCond = _{ OEQ | ONE | OGT | OGE | OLT | OLE }

// type convert
SiToFp = { "sitofp " }
FpToSi = { "fptosi " }

// phi
PhiItem = { "[" ~ Value ~ "," ~ RefLabel ~ "]" }

// instructions
LabelInstr = { Label ~ ":" }
ArithInstr = { Ident ~ " = " ~ ArithOp ~ VarType ~ Value ~ "," ~ Value }
IcmpInstr = { Ident ~ " = " ~ "icmp" ~ IcmpCond ~ VarType ~ Value ~ "," ~ Value }
FcmpInstr = { Ident ~ " = " ~ "fcmp " ~ FcmpCond ~ VarType ~ Value ~ "," ~ Value }
ConvertInstr = {
  Ident ~ " = " ~ (SiToFp | FpToSi) ~ VarType ~ Value ~ " to " ~ VarType
}
JumpInstr = { "br " ~ "label " ~ RefLabel }
JumpCondInstr = {
  "br " ~ VarType ~ Value ~ "," ~ "label " ~ RefLabel ~ "," ~ "label " ~ RefLabel
}
PhiInstr = { Ident ~ " = " ~ "phi " ~ VarType ~ PhiItem ~ ("," ~ PhiItem)* }
RetInstr = { "ret " ~ ((VarType ~ Value) | void_t) }
// you should explicitly declare the size of space to alloc 
AllocInstr = { 
  Ident ~ " = " ~ "alloca " ~ VarType ~ "," ~ VarType ~ Value
}
StoreInstr = { "store " ~ VarType ~ Value ~ "," ~ PtrType ~ Ident }
LoadInstr = { Ident ~ " = " ~ "load " ~ VarType ~ "," ~ PtrType ~ Ident }
// note this is different from the real llvm !
GEPInstr = { Ident ~ " = " ~ "getelementptr " ~ VarType ~ RefLabel ~ "," ~ VarType ~ Value }
CallInstr = {
  Ident ~ " = " ~ "call" ~ VarType ~ RefLabel ~ "(" 
    ~ ((VarType ~ Value) ~ ("," ~ VarType ~ Value)*)? ~")"
}
Instr = {
  LabelInstr | ArithInstr | IcmpInstr | FcmpInstr
  | ConvertInstr | JumpInstr | JumpCondInstr | PhiInstr
  | RetInstr | AllocInstr | StoreInstr | LoadInstr 
  | CallInstr | GEPInstr
}

// function declaration
VarDecl = { VarType ~ Ident }
FuncDecl = {
  "define" ~ FuncType ~ RefLabel ~ "(" ~ VarDecl* ~ ")" ~ "{"~ NEWLINE
  ~ (Instr ~ NEWLINE)* ~ "}"
}

// global declaration
VarGlobalDecl = { Label ~ " = " ~ "global " ~ VarType ~ Number }
// multidimensional array is banned
ArrayDimsDecl = { "[" ~ Integer ~ " x " ~ VarType ~ "]" }
// array with length 0 is also banned
ArrayInitList = { "[" ~ VarType ~ Number ~ ("," ~ VarType ~ Number)* ~ "]" }
ArrayGlobalDecl = { Label ~ " = " ~ "global " ~ ArrayDimsDecl ~ ArrayInitList }

// finally, the program
Program = {
  SOI ~ ((VarGlobalDecl | ArrayGlobalDecl | FuncDecl) ~ NEWLINE)* ~ EOI
}