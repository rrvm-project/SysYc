WHITESPACE = _{ " " | "\t" | NEWLINE }
NEWLINE = _{ "\r\n" | "\n" | "\r" }
COMMENT = _{
  "//" ~ (!NEWLINE ~ ANY)* |
  "/*" ~ (!"*/" ~ ANY)* ~ "*/"
}

// TODO: 多种进制的整数
Integer = ${ ASCII_DIGIT+ }
// 先这样看看效果
Float = ${ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
Number = _{ Float | Integer}

// 怎么能不支持下划线，我给他加上了
Identifier = ${ (ASCII_ALPHA | "_") ~ (ASCII_DIGIT | ASCII_ALPHA | "_")* }

int_t = { "int " }
float_t = { "float " }
void_t = { "void " }
BType = _{ int_t | float_t }
FuncType = _{ int_t | float_t | void_t }

Add = { "+" }
Sub = { "-" }
Mul = { "*" }
Div = { "/" }
Mod = { "%" }
LT = { "<" }
LE = { "<=" }
GT = { ">" }
GE = { ">=" }
EQ = { "==" }
NE = { "!=" }
LAnd = { "&&" }
LOr = { "||" }
Assign = { "=" }

UnaryAdd = { "+" }
UnarySub = { "-" }
UnaryNot = { "!" }

Break = { "break" }
Continue = { "continue" }
Return = { "return" ~ Expr? }

UnaryOp = _{
  UnaryAdd | UnarySub | UnaryNot
}

CompUnit = _{ Decl | FuncDecl }
DimList = { ("[" ~ Expr ~ "]")* }

Decl = { ConstDecl | VarDecl }
ConstDecl = { "const " ~ BType ~ VarDef ~ ("," ~ VarDef)* ~ ";" }
VarDecl = { BType ~ VarDef ~ ("," ~ VarDef)* ~ ";" }
VarDef = { Identifier ~ DimList ~ ("=" ~ InitVal)? }
InitVal = _{ Expr | InitValList }
InitValList = { "{" ~ (InitVal ~ ("," ~ InitVal)*)? ~ "}" }
FuncDecl = {
  FuncType ~ Identifier ~ "(" ~ FormalParams ~ ")" ~ Block
}

FormalParams = { (FormalParam ~ ("," ~ FormalParam)*)? }
FormalParam = { BType ~ Identifier ~ ("[]" ~ DimList)? }
RealParams = _{ (Expr ~ ("," ~ Expr)*)? }

Block = { "{" ~ BlockItem* ~ "}" }
BlockItem = _{ Decl | Stmt }

IfStmt = {
  "if" ~ "(" ~ Expr ~ ")" ~ Stmt ~ ( "else" ~ Stmt)?
}
WhileStmt = {
  "while" ~ "(" ~ Expr ~ ")" ~ Stmt
}

Stmt = {
  ";"
  | Return ~ ";"
  | Continue ~ ";"
  | Break ~ ";"
  | WhileStmt
  | Expr ~ ";"
  | Block
  | IfStmt
}

Lval = { Identifier ~ DimList }
FuncCall = { Identifier ~ "(" ~ RealParams ~ ")"}
Primary = { "(" ~ Expr ~ ")" | Number | FuncCall | Lval }
UnaryExpr = { Primary | UnaryOp ~ UnaryExpr }
MulExpr = { UnaryExpr ~ ((Mul | Div | Mod) ~ MulExpr)? }
AddExpr = { MulExpr ~ ((Add | Sub) ~ AddExpr)? }
RelExpr = { AddExpr ~ ((GE | GT | LE | LT) ~ RelExpr)? }
EqExpr = { RelExpr ~ ((EQ | NE) ~ EqExpr)? }
LAndExpr = { EqExpr ~ (LAnd ~ LAndExpr)? }
LOrExpr = { LAndExpr ~ (LOr ~ LOrExpr)? }
BinaryExpr = { LOrExpr ~ (Assign ~ BinaryExpr)? }
Expr = { BinaryExpr | UnaryExpr }

Program = _{ SOI ~ (CompUnit)* ~ EOI }