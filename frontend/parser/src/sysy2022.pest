WHITESPACE = _{  " " | "\t" | NEWLINE }
NEWLINE = _{ "\r\n" | "\n" | "\r" }
COMMENT = _{
  "//" ~ (!NEWLINE ~ ANY)* |
  "/*" ~ (!"*/" ~ ANY)* ~ "*/"
}

Integer = ${ ASCII_DIGIT+ }
// pdf 打不开，先这样看看效果
Float = ${ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
Number = { Integer | Float }

// 怎么能不支持下划线，我给他加上了
Identifier = ${ (ASCII_ALPHA | "_") ~ (ASCII_DIGIT | ASCII_ALPHA | "_")* }

int_t = { "int" }
float_t = { "float" }
Void = { "void" }
BType = { int_t | float_t }
FuncType = { int_t | float_t | Void }

Plus = { "+" }
Minus = { "-" }
Mul = { "*" }
Div = { "/" }
Mod = { "%" }
LQ = { "<" }
LE = { "<=" }
GQ = { ">" }
GE = { ">=" }
EQ = { "==" }
NE = { "!=" }
LAnd = { "&&" }
LOr = { "||" }
Not = { "!" }
Assign = { "=" }

Break = { "break" }
Continue = { "Continue" }
Return = { "return" }

// 他不把赋值当运算，我给改了
BinaryOp = _{
  Assign | Plus | Minus | Mul | Div | Mod | LQ | LE | GE | GQ | EQ | NE
}
UnaryOp = _{
  Plus | Minus | Not
}

CompUnit = _{ Decl | FuncDecl }
DimList = { ("[" ~ Expr ~ "]")* }

Decl = { ConstDecl | VarDecl }
ConstDecl = { "const" ~ " " ~ BType ~ " " ~ VarDef ~ ("," ~ VarDef)* ~ ";" }
VarDecl = { BType ~ " " ~ VarDef ~ ("," ~ VarDef)* ~ ";" }
VarDef = { Identifier ~ DimList? ~ ("=" ~ InitVal)? }
InitVal = _{ Expr | InitValList }
InitValList = { "{" ~ (InitVal ~ ("," ~ InitVal)*)? ~ "}" }
FuncDecl = {
  FuncType ~ Identifier ~ "(" ~ FormalParams ~ ")" ~ Block
}

FormalParams = { FormalParam ~ ("," ~ FormalParam)* }
FormalParam = { BType ~ " " ~ Identifier ~ ("[]" ~ DimList)? }
RealParams = { Expr ~ ("," ~ Expr)* }


Block = { "{" ~ BlockItem* ~ "}" }
BlockItem = { Decl | Stmt }

IfStmt = {
  "if" ~ "(" ~ Expr ~ ")" ~ Stmt ~ ( "else" ~ Stmt)?
}
WhileStmt = {
  "while" ~ "(" ~ Expr ~ ")" ~ Stmt
}

Stmt = {
  ";"
  | Expr ~ ";"
  | Block
  | IfStmt
  | WhileStmt
  | Break ~ ";"
  | Continue ~ ";"
  | Return ~ Expr? ~ ";"
}

// BinaryExp = { Expr ~ BinaryOp ~ Expr }
// UnaryExp = { UnaryOp ~ Expr }
Primary = _{ "(" ~ Expr ~ ")" | Number | Identifier ~ DimList? }
Atom = _{ UnaryOp? ~ Primary }
Expr = { Atom ~ (BinaryOp ~ Atom)* }

Program = { SOI ~ (CompUnit)* ~ EOI }